
DEVC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007bc  080007bc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007bc  080007bc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080007bc  080007bc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007bc  080007bc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007bc  080007bc  000107bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007c0  080007c0  000107c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080007c4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000004  080007c8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080007c8  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000026d1  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c29  00000000  00000000  000226fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000340  00000000  00000000  00023328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002c8  00000000  00000000  00023668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015747  00000000  00000000  00023930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003867  00000000  00000000  00039077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b818  00000000  00000000  0003c8de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b80f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000af4  00000000  00000000  000b814c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080007a4 	.word	0x080007a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080007a4 	.word	0x080007a4

0800014c <main>:
  * @retval int
  */
int i = 0 ;
static volatile int j =0;
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f8f4 	bl	800033c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000154:	f000 f820 	bl	8000198 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000158:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800015c:	480b      	ldr	r0, [pc, #44]	; (800018c <main+0x40>)
 800015e:	f000 fae3 	bl	8000728 <HAL_GPIO_TogglePin>
	  for ( i = 0 ; i < 50000; i++)
 8000162:	4b0b      	ldr	r3, [pc, #44]	; (8000190 <main+0x44>)
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
 8000168:	e009      	b.n	800017e <main+0x32>
	  {
		  j++;
 800016a:	4b0a      	ldr	r3, [pc, #40]	; (8000194 <main+0x48>)
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	3301      	adds	r3, #1
 8000170:	4a08      	ldr	r2, [pc, #32]	; (8000194 <main+0x48>)
 8000172:	6013      	str	r3, [r2, #0]
	  for ( i = 0 ; i < 50000; i++)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <main+0x44>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	3301      	adds	r3, #1
 800017a:	4a05      	ldr	r2, [pc, #20]	; (8000190 <main+0x44>)
 800017c:	6013      	str	r3, [r2, #0]
 800017e:	4b04      	ldr	r3, [pc, #16]	; (8000190 <main+0x44>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000186:	4293      	cmp	r3, r2
 8000188:	ddef      	ble.n	800016a <main+0x1e>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800018a:	e7e5      	b.n	8000158 <main+0xc>
 800018c:	40011000 	.word	0x40011000
 8000190:	20000020 	.word	0x20000020
 8000194:	20000024 	.word	0x20000024

08000198 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b088      	sub	sp, #32
 800019c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800019e:	f107 0310 	add.w	r3, r7, #16
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ac:	4b1e      	ldr	r3, [pc, #120]	; (8000228 <MX_GPIO_Init+0x90>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a1d      	ldr	r2, [pc, #116]	; (8000228 <MX_GPIO_Init+0x90>)
 80001b2:	f043 0310 	orr.w	r3, r3, #16
 80001b6:	6193      	str	r3, [r2, #24]
 80001b8:	4b1b      	ldr	r3, [pc, #108]	; (8000228 <MX_GPIO_Init+0x90>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	f003 0310 	and.w	r3, r3, #16
 80001c0:	60fb      	str	r3, [r7, #12]
 80001c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001c4:	4b18      	ldr	r3, [pc, #96]	; (8000228 <MX_GPIO_Init+0x90>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	4a17      	ldr	r2, [pc, #92]	; (8000228 <MX_GPIO_Init+0x90>)
 80001ca:	f043 0320 	orr.w	r3, r3, #32
 80001ce:	6193      	str	r3, [r2, #24]
 80001d0:	4b15      	ldr	r3, [pc, #84]	; (8000228 <MX_GPIO_Init+0x90>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	f003 0320 	and.w	r3, r3, #32
 80001d8:	60bb      	str	r3, [r7, #8]
 80001da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <MX_GPIO_Init+0x90>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	4a11      	ldr	r2, [pc, #68]	; (8000228 <MX_GPIO_Init+0x90>)
 80001e2:	f043 0304 	orr.w	r3, r3, #4
 80001e6:	6193      	str	r3, [r2, #24]
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <MX_GPIO_Init+0x90>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	f003 0304 	and.w	r3, r3, #4
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80001f4:	2200      	movs	r2, #0
 80001f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001fa:	480c      	ldr	r0, [pc, #48]	; (800022c <MX_GPIO_Init+0x94>)
 80001fc:	f000 fa7c 	bl	80006f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000200:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000204:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000206:	2301      	movs	r3, #1
 8000208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800020a:	2300      	movs	r3, #0
 800020c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800020e:	2302      	movs	r3, #2
 8000210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000212:	f107 0310 	add.w	r3, r7, #16
 8000216:	4619      	mov	r1, r3
 8000218:	4804      	ldr	r0, [pc, #16]	; (800022c <MX_GPIO_Init+0x94>)
 800021a:	f000 f8e9 	bl	80003f0 <HAL_GPIO_Init>

}
 800021e:	bf00      	nop
 8000220:	3720      	adds	r7, #32
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	40021000 	.word	0x40021000
 800022c:	40011000 	.word	0x40011000

08000230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000236:	4b15      	ldr	r3, [pc, #84]	; (800028c <HAL_MspInit+0x5c>)
 8000238:	699b      	ldr	r3, [r3, #24]
 800023a:	4a14      	ldr	r2, [pc, #80]	; (800028c <HAL_MspInit+0x5c>)
 800023c:	f043 0301 	orr.w	r3, r3, #1
 8000240:	6193      	str	r3, [r2, #24]
 8000242:	4b12      	ldr	r3, [pc, #72]	; (800028c <HAL_MspInit+0x5c>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	f003 0301 	and.w	r3, r3, #1
 800024a:	60bb      	str	r3, [r7, #8]
 800024c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800024e:	4b0f      	ldr	r3, [pc, #60]	; (800028c <HAL_MspInit+0x5c>)
 8000250:	69db      	ldr	r3, [r3, #28]
 8000252:	4a0e      	ldr	r2, [pc, #56]	; (800028c <HAL_MspInit+0x5c>)
 8000254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000258:	61d3      	str	r3, [r2, #28]
 800025a:	4b0c      	ldr	r3, [pc, #48]	; (800028c <HAL_MspInit+0x5c>)
 800025c:	69db      	ldr	r3, [r3, #28]
 800025e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000262:	607b      	str	r3, [r7, #4]
 8000264:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000266:	4b0a      	ldr	r3, [pc, #40]	; (8000290 <HAL_MspInit+0x60>)
 8000268:	685b      	ldr	r3, [r3, #4]
 800026a:	60fb      	str	r3, [r7, #12]
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000272:	60fb      	str	r3, [r7, #12]
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800027a:	60fb      	str	r3, [r7, #12]
 800027c:	4a04      	ldr	r2, [pc, #16]	; (8000290 <HAL_MspInit+0x60>)
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000282:	bf00      	nop
 8000284:	3714      	adds	r7, #20
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr
 800028c:	40021000 	.word	0x40021000
 8000290:	40010000 	.word	0x40010000

08000294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000298:	e7fe      	b.n	8000298 <NMI_Handler+0x4>

0800029a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800029a:	b480      	push	{r7}
 800029c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
//
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800029e:	e7fe      	b.n	800029e <HardFault_Handler+0x4>

080002a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002a4:	e7fe      	b.n	80002a4 <MemManage_Handler+0x4>

080002a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002a6:	b480      	push	{r7}
 80002a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002aa:	e7fe      	b.n	80002aa <BusFault_Handler+0x4>

080002ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002b0:	e7fe      	b.n	80002b0 <UsageFault_Handler+0x4>

080002b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002b2:	b480      	push	{r7}
 80002b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bc80      	pop	{r7}
 80002bc:	4770      	bx	lr

080002be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002be:	b480      	push	{r7}
 80002c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002c2:	bf00      	nop
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr

080002ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002ca:	b480      	push	{r7}
 80002cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bc80      	pop	{r7}
 80002d4:	4770      	bx	lr

080002d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002d6:	b580      	push	{r7, lr}
 80002d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002da:	f000 f847 	bl	800036c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}

080002e2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e2:	b480      	push	{r7}
 80002e4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80002e6:	bf00      	nop
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
	...

080002f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002f0:	480c      	ldr	r0, [pc, #48]	; (8000324 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80002f2:	490d      	ldr	r1, [pc, #52]	; (8000328 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80002f4:	4a0d      	ldr	r2, [pc, #52]	; (800032c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80002f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f8:	e002      	b.n	8000300 <LoopCopyDataInit>

080002fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002fe:	3304      	adds	r3, #4

08000300 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000300:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000302:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000304:	d3f9      	bcc.n	80002fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000306:	4a0a      	ldr	r2, [pc, #40]	; (8000330 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000308:	4c0a      	ldr	r4, [pc, #40]	; (8000334 <LoopFillZerobss+0x22>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800030c:	e001      	b.n	8000312 <LoopFillZerobss>

0800030e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800030e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000310:	3204      	adds	r2, #4

08000312 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000312:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000314:	d3fb      	bcc.n	800030e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000316:	f7ff ffe4 	bl	80002e2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800031a:	f000 fa1f 	bl	800075c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800031e:	f7ff ff15 	bl	800014c <main>
  bx lr
 8000322:	4770      	bx	lr
  ldr r0, =_sdata
 8000324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000328:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800032c:	080007c4 	.word	0x080007c4
  ldr r2, =_sbss
 8000330:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000334:	20000030 	.word	0x20000030

08000338 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000338:	e7fe      	b.n	8000338 <ADC1_2_IRQHandler>
	...

0800033c <HAL_Init>:
volatile int DebugVar_2 = 0;
volatile int DebugVar_3 = 0;
volatile int DebugVar_4 = 0;
volatile HAL_StatusTypeDef HAL_IntTick_return = 0x00;
HAL_StatusTypeDef HAL_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0)
#if defined(STM32F101x6) || defined(STM32F101xB) || defined(STM32F101xE) || defined(STM32F101xG) || \
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)
	DebugVar_1 = 1;
 8000340:	4b08      	ldr	r3, [pc, #32]	; (8000364 <HAL_Init+0x28>)
 8000342:	2201      	movs	r2, #1
 8000344:	601a      	str	r2, [r3, #0]
  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <HAL_Init+0x2c>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a07      	ldr	r2, [pc, #28]	; (8000368 <HAL_Init+0x2c>)
 800034c:	f043 0310 	orr.w	r3, r3, #16
 8000350:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000352:	2003      	movs	r0, #3
 8000354:	f000 f840 	bl	80003d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
//  HAL_IntTick_return = HAL_InitTick(TICK_INT_PRIORITY);

  /* Init the low level hardware */
  HAL_MspInit();
 8000358:	f7ff ff6a 	bl	8000230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800035c:	2300      	movs	r3, #0
}
 800035e:	4618      	mov	r0, r3
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	20000028 	.word	0x20000028
 8000368:	40022000 	.word	0x40022000

0800036c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000370:	4b05      	ldr	r3, [pc, #20]	; (8000388 <HAL_IncTick+0x1c>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	461a      	mov	r2, r3
 8000376:	4b05      	ldr	r3, [pc, #20]	; (800038c <HAL_IncTick+0x20>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4413      	add	r3, r2
 800037c:	4a03      	ldr	r2, [pc, #12]	; (800038c <HAL_IncTick+0x20>)
 800037e:	6013      	str	r3, [r2, #0]
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	20000000 	.word	0x20000000
 800038c:	2000002c 	.word	0x2000002c

08000390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f003 0307 	and.w	r3, r3, #7
 800039e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003a0:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <__NVIC_SetPriorityGrouping+0x44>)
 80003a2:	68db      	ldr	r3, [r3, #12]
 80003a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80003ac:	4013      	ands	r3, r2
 80003ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003b4:	68bb      	ldr	r3, [r7, #8]
 80003b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80003bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003c2:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <__NVIC_SetPriorityGrouping+0x44>)
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	60d3      	str	r3, [r2, #12]
}
 80003c8:	bf00      	nop
 80003ca:	3714      	adds	r7, #20
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	e000ed00 	.word	0xe000ed00

080003d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003e0:	6878      	ldr	r0, [r7, #4]
 80003e2:	f7ff ffd5 	bl	8000390 <__NVIC_SetPriorityGrouping>
}
 80003e6:	bf00      	nop
 80003e8:	3708      	adds	r7, #8
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
	...

080003f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b08b      	sub	sp, #44	; 0x2c
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80003fa:	2300      	movs	r3, #0
 80003fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80003fe:	2300      	movs	r3, #0
 8000400:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000402:	e169      	b.n	80006d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000404:	2201      	movs	r2, #1
 8000406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000408:	fa02 f303 	lsl.w	r3, r2, r3
 800040c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	69fa      	ldr	r2, [r7, #28]
 8000414:	4013      	ands	r3, r2
 8000416:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000418:	69ba      	ldr	r2, [r7, #24]
 800041a:	69fb      	ldr	r3, [r7, #28]
 800041c:	429a      	cmp	r2, r3
 800041e:	f040 8158 	bne.w	80006d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	685b      	ldr	r3, [r3, #4]
 8000426:	4a9a      	ldr	r2, [pc, #616]	; (8000690 <HAL_GPIO_Init+0x2a0>)
 8000428:	4293      	cmp	r3, r2
 800042a:	d05e      	beq.n	80004ea <HAL_GPIO_Init+0xfa>
 800042c:	4a98      	ldr	r2, [pc, #608]	; (8000690 <HAL_GPIO_Init+0x2a0>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d875      	bhi.n	800051e <HAL_GPIO_Init+0x12e>
 8000432:	4a98      	ldr	r2, [pc, #608]	; (8000694 <HAL_GPIO_Init+0x2a4>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d058      	beq.n	80004ea <HAL_GPIO_Init+0xfa>
 8000438:	4a96      	ldr	r2, [pc, #600]	; (8000694 <HAL_GPIO_Init+0x2a4>)
 800043a:	4293      	cmp	r3, r2
 800043c:	d86f      	bhi.n	800051e <HAL_GPIO_Init+0x12e>
 800043e:	4a96      	ldr	r2, [pc, #600]	; (8000698 <HAL_GPIO_Init+0x2a8>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d052      	beq.n	80004ea <HAL_GPIO_Init+0xfa>
 8000444:	4a94      	ldr	r2, [pc, #592]	; (8000698 <HAL_GPIO_Init+0x2a8>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d869      	bhi.n	800051e <HAL_GPIO_Init+0x12e>
 800044a:	4a94      	ldr	r2, [pc, #592]	; (800069c <HAL_GPIO_Init+0x2ac>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d04c      	beq.n	80004ea <HAL_GPIO_Init+0xfa>
 8000450:	4a92      	ldr	r2, [pc, #584]	; (800069c <HAL_GPIO_Init+0x2ac>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d863      	bhi.n	800051e <HAL_GPIO_Init+0x12e>
 8000456:	4a92      	ldr	r2, [pc, #584]	; (80006a0 <HAL_GPIO_Init+0x2b0>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d046      	beq.n	80004ea <HAL_GPIO_Init+0xfa>
 800045c:	4a90      	ldr	r2, [pc, #576]	; (80006a0 <HAL_GPIO_Init+0x2b0>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d85d      	bhi.n	800051e <HAL_GPIO_Init+0x12e>
 8000462:	2b12      	cmp	r3, #18
 8000464:	d82a      	bhi.n	80004bc <HAL_GPIO_Init+0xcc>
 8000466:	2b12      	cmp	r3, #18
 8000468:	d859      	bhi.n	800051e <HAL_GPIO_Init+0x12e>
 800046a:	a201      	add	r2, pc, #4	; (adr r2, 8000470 <HAL_GPIO_Init+0x80>)
 800046c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000470:	080004eb 	.word	0x080004eb
 8000474:	080004c5 	.word	0x080004c5
 8000478:	080004d7 	.word	0x080004d7
 800047c:	08000519 	.word	0x08000519
 8000480:	0800051f 	.word	0x0800051f
 8000484:	0800051f 	.word	0x0800051f
 8000488:	0800051f 	.word	0x0800051f
 800048c:	0800051f 	.word	0x0800051f
 8000490:	0800051f 	.word	0x0800051f
 8000494:	0800051f 	.word	0x0800051f
 8000498:	0800051f 	.word	0x0800051f
 800049c:	0800051f 	.word	0x0800051f
 80004a0:	0800051f 	.word	0x0800051f
 80004a4:	0800051f 	.word	0x0800051f
 80004a8:	0800051f 	.word	0x0800051f
 80004ac:	0800051f 	.word	0x0800051f
 80004b0:	0800051f 	.word	0x0800051f
 80004b4:	080004cd 	.word	0x080004cd
 80004b8:	080004e1 	.word	0x080004e1
 80004bc:	4a79      	ldr	r2, [pc, #484]	; (80006a4 <HAL_GPIO_Init+0x2b4>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d013      	beq.n	80004ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80004c2:	e02c      	b.n	800051e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	68db      	ldr	r3, [r3, #12]
 80004c8:	623b      	str	r3, [r7, #32]
          break;
 80004ca:	e029      	b.n	8000520 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80004cc:	683b      	ldr	r3, [r7, #0]
 80004ce:	68db      	ldr	r3, [r3, #12]
 80004d0:	3304      	adds	r3, #4
 80004d2:	623b      	str	r3, [r7, #32]
          break;
 80004d4:	e024      	b.n	8000520 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	68db      	ldr	r3, [r3, #12]
 80004da:	3308      	adds	r3, #8
 80004dc:	623b      	str	r3, [r7, #32]
          break;
 80004de:	e01f      	b.n	8000520 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	330c      	adds	r3, #12
 80004e6:	623b      	str	r3, [r7, #32]
          break;
 80004e8:	e01a      	b.n	8000520 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	689b      	ldr	r3, [r3, #8]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d102      	bne.n	80004f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004f2:	2304      	movs	r3, #4
 80004f4:	623b      	str	r3, [r7, #32]
          break;
 80004f6:	e013      	b.n	8000520 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	689b      	ldr	r3, [r3, #8]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d105      	bne.n	800050c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000500:	2308      	movs	r3, #8
 8000502:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	69fa      	ldr	r2, [r7, #28]
 8000508:	611a      	str	r2, [r3, #16]
          break;
 800050a:	e009      	b.n	8000520 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800050c:	2308      	movs	r3, #8
 800050e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	69fa      	ldr	r2, [r7, #28]
 8000514:	615a      	str	r2, [r3, #20]
          break;
 8000516:	e003      	b.n	8000520 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000518:	2300      	movs	r3, #0
 800051a:	623b      	str	r3, [r7, #32]
          break;
 800051c:	e000      	b.n	8000520 <HAL_GPIO_Init+0x130>
          break;
 800051e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000520:	69bb      	ldr	r3, [r7, #24]
 8000522:	2bff      	cmp	r3, #255	; 0xff
 8000524:	d801      	bhi.n	800052a <HAL_GPIO_Init+0x13a>
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	e001      	b.n	800052e <HAL_GPIO_Init+0x13e>
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3304      	adds	r3, #4
 800052e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000530:	69bb      	ldr	r3, [r7, #24]
 8000532:	2bff      	cmp	r3, #255	; 0xff
 8000534:	d802      	bhi.n	800053c <HAL_GPIO_Init+0x14c>
 8000536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	e002      	b.n	8000542 <HAL_GPIO_Init+0x152>
 800053c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800053e:	3b08      	subs	r3, #8
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	210f      	movs	r1, #15
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	fa01 f303 	lsl.w	r3, r1, r3
 8000550:	43db      	mvns	r3, r3
 8000552:	401a      	ands	r2, r3
 8000554:	6a39      	ldr	r1, [r7, #32]
 8000556:	693b      	ldr	r3, [r7, #16]
 8000558:	fa01 f303 	lsl.w	r3, r1, r3
 800055c:	431a      	orrs	r2, r3
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056a:	2b00      	cmp	r3, #0
 800056c:	f000 80b1 	beq.w	80006d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000570:	4b4d      	ldr	r3, [pc, #308]	; (80006a8 <HAL_GPIO_Init+0x2b8>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a4c      	ldr	r2, [pc, #304]	; (80006a8 <HAL_GPIO_Init+0x2b8>)
 8000576:	f043 0301 	orr.w	r3, r3, #1
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b4a      	ldr	r3, [pc, #296]	; (80006a8 <HAL_GPIO_Init+0x2b8>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0301 	and.w	r3, r3, #1
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000588:	4a48      	ldr	r2, [pc, #288]	; (80006ac <HAL_GPIO_Init+0x2bc>)
 800058a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800058c:	089b      	lsrs	r3, r3, #2
 800058e:	3302      	adds	r3, #2
 8000590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000594:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000598:	f003 0303 	and.w	r3, r3, #3
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	220f      	movs	r2, #15
 80005a0:	fa02 f303 	lsl.w	r3, r2, r3
 80005a4:	43db      	mvns	r3, r3
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	4013      	ands	r3, r2
 80005aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a40      	ldr	r2, [pc, #256]	; (80006b0 <HAL_GPIO_Init+0x2c0>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d013      	beq.n	80005dc <HAL_GPIO_Init+0x1ec>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4a3f      	ldr	r2, [pc, #252]	; (80006b4 <HAL_GPIO_Init+0x2c4>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d00d      	beq.n	80005d8 <HAL_GPIO_Init+0x1e8>
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4a3e      	ldr	r2, [pc, #248]	; (80006b8 <HAL_GPIO_Init+0x2c8>)
 80005c0:	4293      	cmp	r3, r2
 80005c2:	d007      	beq.n	80005d4 <HAL_GPIO_Init+0x1e4>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4a3d      	ldr	r2, [pc, #244]	; (80006bc <HAL_GPIO_Init+0x2cc>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d101      	bne.n	80005d0 <HAL_GPIO_Init+0x1e0>
 80005cc:	2303      	movs	r3, #3
 80005ce:	e006      	b.n	80005de <HAL_GPIO_Init+0x1ee>
 80005d0:	2304      	movs	r3, #4
 80005d2:	e004      	b.n	80005de <HAL_GPIO_Init+0x1ee>
 80005d4:	2302      	movs	r3, #2
 80005d6:	e002      	b.n	80005de <HAL_GPIO_Init+0x1ee>
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <HAL_GPIO_Init+0x1ee>
 80005dc:	2300      	movs	r3, #0
 80005de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005e0:	f002 0203 	and.w	r2, r2, #3
 80005e4:	0092      	lsls	r2, r2, #2
 80005e6:	4093      	lsls	r3, r2
 80005e8:	68fa      	ldr	r2, [r7, #12]
 80005ea:	4313      	orrs	r3, r2
 80005ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80005ee:	492f      	ldr	r1, [pc, #188]	; (80006ac <HAL_GPIO_Init+0x2bc>)
 80005f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f2:	089b      	lsrs	r3, r3, #2
 80005f4:	3302      	adds	r3, #2
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000604:	2b00      	cmp	r3, #0
 8000606:	d006      	beq.n	8000616 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000608:	4b2d      	ldr	r3, [pc, #180]	; (80006c0 <HAL_GPIO_Init+0x2d0>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	492c      	ldr	r1, [pc, #176]	; (80006c0 <HAL_GPIO_Init+0x2d0>)
 800060e:	69bb      	ldr	r3, [r7, #24]
 8000610:	4313      	orrs	r3, r2
 8000612:	600b      	str	r3, [r1, #0]
 8000614:	e006      	b.n	8000624 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000616:	4b2a      	ldr	r3, [pc, #168]	; (80006c0 <HAL_GPIO_Init+0x2d0>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	69bb      	ldr	r3, [r7, #24]
 800061c:	43db      	mvns	r3, r3
 800061e:	4928      	ldr	r1, [pc, #160]	; (80006c0 <HAL_GPIO_Init+0x2d0>)
 8000620:	4013      	ands	r3, r2
 8000622:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800062c:	2b00      	cmp	r3, #0
 800062e:	d006      	beq.n	800063e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000630:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <HAL_GPIO_Init+0x2d0>)
 8000632:	685a      	ldr	r2, [r3, #4]
 8000634:	4922      	ldr	r1, [pc, #136]	; (80006c0 <HAL_GPIO_Init+0x2d0>)
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	4313      	orrs	r3, r2
 800063a:	604b      	str	r3, [r1, #4]
 800063c:	e006      	b.n	800064c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800063e:	4b20      	ldr	r3, [pc, #128]	; (80006c0 <HAL_GPIO_Init+0x2d0>)
 8000640:	685a      	ldr	r2, [r3, #4]
 8000642:	69bb      	ldr	r3, [r7, #24]
 8000644:	43db      	mvns	r3, r3
 8000646:	491e      	ldr	r1, [pc, #120]	; (80006c0 <HAL_GPIO_Init+0x2d0>)
 8000648:	4013      	ands	r3, r2
 800064a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000654:	2b00      	cmp	r3, #0
 8000656:	d006      	beq.n	8000666 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <HAL_GPIO_Init+0x2d0>)
 800065a:	689a      	ldr	r2, [r3, #8]
 800065c:	4918      	ldr	r1, [pc, #96]	; (80006c0 <HAL_GPIO_Init+0x2d0>)
 800065e:	69bb      	ldr	r3, [r7, #24]
 8000660:	4313      	orrs	r3, r2
 8000662:	608b      	str	r3, [r1, #8]
 8000664:	e006      	b.n	8000674 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <HAL_GPIO_Init+0x2d0>)
 8000668:	689a      	ldr	r2, [r3, #8]
 800066a:	69bb      	ldr	r3, [r7, #24]
 800066c:	43db      	mvns	r3, r3
 800066e:	4914      	ldr	r1, [pc, #80]	; (80006c0 <HAL_GPIO_Init+0x2d0>)
 8000670:	4013      	ands	r3, r2
 8000672:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	685b      	ldr	r3, [r3, #4]
 8000678:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800067c:	2b00      	cmp	r3, #0
 800067e:	d021      	beq.n	80006c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <HAL_GPIO_Init+0x2d0>)
 8000682:	68da      	ldr	r2, [r3, #12]
 8000684:	490e      	ldr	r1, [pc, #56]	; (80006c0 <HAL_GPIO_Init+0x2d0>)
 8000686:	69bb      	ldr	r3, [r7, #24]
 8000688:	4313      	orrs	r3, r2
 800068a:	60cb      	str	r3, [r1, #12]
 800068c:	e021      	b.n	80006d2 <HAL_GPIO_Init+0x2e2>
 800068e:	bf00      	nop
 8000690:	10320000 	.word	0x10320000
 8000694:	10310000 	.word	0x10310000
 8000698:	10220000 	.word	0x10220000
 800069c:	10210000 	.word	0x10210000
 80006a0:	10120000 	.word	0x10120000
 80006a4:	10110000 	.word	0x10110000
 80006a8:	40021000 	.word	0x40021000
 80006ac:	40010000 	.word	0x40010000
 80006b0:	40010800 	.word	0x40010800
 80006b4:	40010c00 	.word	0x40010c00
 80006b8:	40011000 	.word	0x40011000
 80006bc:	40011400 	.word	0x40011400
 80006c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80006c4:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <HAL_GPIO_Init+0x304>)
 80006c6:	68da      	ldr	r2, [r3, #12]
 80006c8:	69bb      	ldr	r3, [r7, #24]
 80006ca:	43db      	mvns	r3, r3
 80006cc:	4909      	ldr	r1, [pc, #36]	; (80006f4 <HAL_GPIO_Init+0x304>)
 80006ce:	4013      	ands	r3, r2
 80006d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80006d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d4:	3301      	adds	r3, #1
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006de:	fa22 f303 	lsr.w	r3, r2, r3
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	f47f ae8e 	bne.w	8000404 <HAL_GPIO_Init+0x14>
  }
}
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
 80006ec:	372c      	adds	r7, #44	; 0x2c
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr
 80006f4:	40010400 	.word	0x40010400

080006f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	807b      	strh	r3, [r7, #2]
 8000704:	4613      	mov	r3, r2
 8000706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000708:	787b      	ldrb	r3, [r7, #1]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d003      	beq.n	8000716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800070e:	887a      	ldrh	r2, [r7, #2]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000714:	e003      	b.n	800071e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000716:	887b      	ldrh	r3, [r7, #2]
 8000718:	041a      	lsls	r2, r3, #16
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	611a      	str	r2, [r3, #16]
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
 8000730:	460b      	mov	r3, r1
 8000732:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800073a:	887a      	ldrh	r2, [r7, #2]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	4013      	ands	r3, r2
 8000740:	041a      	lsls	r2, r3, #16
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	43d9      	mvns	r1, r3
 8000746:	887b      	ldrh	r3, [r7, #2]
 8000748:	400b      	ands	r3, r1
 800074a:	431a      	orrs	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	611a      	str	r2, [r3, #16]
}
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
	...

0800075c <__libc_init_array>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	2600      	movs	r6, #0
 8000760:	4d0c      	ldr	r5, [pc, #48]	; (8000794 <__libc_init_array+0x38>)
 8000762:	4c0d      	ldr	r4, [pc, #52]	; (8000798 <__libc_init_array+0x3c>)
 8000764:	1b64      	subs	r4, r4, r5
 8000766:	10a4      	asrs	r4, r4, #2
 8000768:	42a6      	cmp	r6, r4
 800076a:	d109      	bne.n	8000780 <__libc_init_array+0x24>
 800076c:	f000 f81a 	bl	80007a4 <_init>
 8000770:	2600      	movs	r6, #0
 8000772:	4d0a      	ldr	r5, [pc, #40]	; (800079c <__libc_init_array+0x40>)
 8000774:	4c0a      	ldr	r4, [pc, #40]	; (80007a0 <__libc_init_array+0x44>)
 8000776:	1b64      	subs	r4, r4, r5
 8000778:	10a4      	asrs	r4, r4, #2
 800077a:	42a6      	cmp	r6, r4
 800077c:	d105      	bne.n	800078a <__libc_init_array+0x2e>
 800077e:	bd70      	pop	{r4, r5, r6, pc}
 8000780:	f855 3b04 	ldr.w	r3, [r5], #4
 8000784:	4798      	blx	r3
 8000786:	3601      	adds	r6, #1
 8000788:	e7ee      	b.n	8000768 <__libc_init_array+0xc>
 800078a:	f855 3b04 	ldr.w	r3, [r5], #4
 800078e:	4798      	blx	r3
 8000790:	3601      	adds	r6, #1
 8000792:	e7f2      	b.n	800077a <__libc_init_array+0x1e>
 8000794:	080007bc 	.word	0x080007bc
 8000798:	080007bc 	.word	0x080007bc
 800079c:	080007bc 	.word	0x080007bc
 80007a0:	080007c0 	.word	0x080007c0

080007a4 <_init>:
 80007a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007a6:	bf00      	nop
 80007a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007aa:	bc08      	pop	{r3}
 80007ac:	469e      	mov	lr, r3
 80007ae:	4770      	bx	lr

080007b0 <_fini>:
 80007b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007b2:	bf00      	nop
 80007b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007b6:	bc08      	pop	{r3}
 80007b8:	469e      	mov	lr, r3
 80007ba:	4770      	bx	lr
